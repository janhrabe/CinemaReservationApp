@page "/seats/{ProjectionId:guid}"
@inject NavigationManager Navigation
@using Cinema.WEB.Api
@using Cinema.Common.Entities.MovieService
@inject MovieServiceHttpClient MovieServiceClient
@inject CinemaServiceHttpClient CinemaServiceClient
@rendermode InteractiveServer

<PageTitle>Rozložení sedadel</PageTitle>

<div class="container">
    <h2>@MovieName</h2>
    <h2>@HallName, @StartingTime</h2>

    @if (isLoading)
    {
        <p>Načítání sedadel...</p>
    }
    else
    {
        @if (!firstRenderCompleted || isLoading)
        {
            <p>Načítání sedadel...</p>
        }
        else
        {
            // render sedadel a tlačítek

            <div class="screen"></div>

            <div class="seating-chart">
                @foreach (var row in seatData.GroupBy(s => s.RowNumber).OrderBy(g => g.Key))
                {
                    <div class="seat-row">
                        <span class="row-number">@row.Key</span>
                        @foreach (var seat in row.OrderBy(s => s.SeatNumber))
                        {
                            var seatId = seat.SeatId.ToString();
                            var isSelected = selectedSeats.Contains(seatId);

                            <a @onclick="() => UpdateSeatSelection(seatId)"
                            class="seat-button @(seat.IsOccupied ? "reserved" : (isSelected ? "selected" : ""))">
                                @seat.SeatNumber
                            </a>
                        }
                    </div>
                }
            </div>
        }

        @if (selectedSeats.Any())
        {
            <a href="/ReservationCreation/@ProjectionId?seats=@string.Join(",", selectedSeats)" class="confirm-button">
                POTVRDIT
            </a>
        }
        else
        {
            <span class="confirm-button disabled">POTVRDIT</span>
        }
    }
</div>

@code {
    [Parameter]
    public Guid ProjectionId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "seats")]
    public string SelectedSeatsQuery { get; set; }

    private List<SeatViewModel> seatData = new();
    private HashSet<string> selectedSeats = new();
    private bool isLoading = true;
    private ProjectionEntity Projekce = null;
    private string HallName = null;
    private string StartingTime = null;
    private string MovieName = null;
    private bool firstRenderCompleted = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            firstRenderCompleted = true;
            StateHasChanged(); // trigger rerender (pokud chceš později skrývat isLoading úplně)
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        Projekce = await MovieServiceClient.GetProjectionById(ProjectionId);
        var hall = await CinemaServiceClient.GetHallByHallId(Projekce.HallId);
        HallName = hall.Name;
        StartingTime = Projekce.StartTime.ToLongDateString();
        var movie = await MovieServiceClient.GetMovieById(Projekce.MovieId);
        MovieName = movie.Title;
        try
        {
            var seats = await MovieServiceClient.GetSeatsProjectionId(ProjectionId);

            seatData = seats
                .GroupBy(s => new { s.SeatNumber, s.RowNumber })
                .Select(g => g.OrderByDescending(x => x.IsOccupied).First())
                .Select(s => new SeatViewModel
                    {
                        SeatNumber = s.SeatNumber,
                        RowNumber = s.RowNumber,
                        SeatId = s.SeatId,
                        IsOccupied = s.IsOccupied
                    })
                .ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Chyba při načítání sedadel: {ex.Message}");
        }

        stopwatch.Stop();
        Console.WriteLine($"⏱️ Načtení sedadel trvalo: {stopwatch.ElapsedMilliseconds} ms");

        isLoading = false;
    }

    protected override void OnParametersSet()
    {
        selectedSeats = SelectedSeatsQuery?.Split(',', StringSplitOptions.RemoveEmptyEntries).ToHashSet()
                        ?? new HashSet<string>();
    }

    private void UpdateSeatSelection(string seatId)
    {
        if (selectedSeats.Contains(seatId))
            selectedSeats.Remove(seatId);
        else
            selectedSeats.Add(seatId);

        var newUrl = $"/seats/{ProjectionId}?seats={string.Join(",", selectedSeats)}";
        Navigation.NavigateTo(newUrl, forceLoad: false);
    }

    public class SeatViewModel
    {
        public int SeatNumber { get; set; }
        public int RowNumber { get; set; }
        public Guid SeatId { get; set; }
        public bool IsOccupied { get; set; }
    }
}



<style>
    .container {
        text-align: center;
        margin-top: 20px;
        font-family: Arial, sans-serif;
    }

    .screen {
        width: 80%;
        height: 30px;
        background-color: gray;
        margin: 10px auto 70px auto;
        border-radius: 5px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.3);
    }

    .seating-chart {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        margin-top: 20px;
    }

    .seat-row {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .row-number {
        font-weight: bold;
        font-size: 18px;
        width: 30px;
        text-align: right;
        margin-right: 10px;
        margin-bottom: 20px;
    }

    .seat-button {
        width: 40px;
        height: 40px;
        border: 2px solid black;
        background-color: white;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        text-decoration: none;
        color: black;
    }

        .seat-button:hover {
            background-color: lightgray;
        }

    .selected {
        background-color: green;
        color: white;
    }

    .reserved {
        background-color: red;
        color: white;
        cursor: not-allowed;
        pointer-events: none;
    }

    .confirm-button {
        margin-top: 20px;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: bold;
        background-color: green;
        color: white;
        border: none;
        cursor: pointer;
        transition: 0.2s;
        text-decoration: none;
        display: inline-block;
    }

        .confirm-button:hover {
            background-color: darkgreen;
        }

        .confirm-button.disabled {
            background-color: gray !important;
            cursor: not-allowed !important;
        }

    .top-right {
        position: absolute;
        top: 60px;
        right: 20px;
    }

    .create-account-button {
        background-color: blue;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
        border-radius: 5px;
    }

        .create-account-button:hover {
            background-color: darkblue;
        }

    .reservation-box {
        border: 2px solid black;
        display: inline-block;
        padding: 20px;
        margin-top: 20px;
        text-align: left;
        background-color: #f9f9f9;
        border-radius: 10px;
        width: 350px;
    }

    .reservation-details {
        border: 1px solid black;
        padding: 10px;
        margin-bottom: 20px;
        background-color: white;
        border-radius: 5px;
    }

    .movie-title {
        background-color: lightgray;
        font-weight: bold;
        text-align: center;
        padding: 5px;
        border-radius: 5px;
    }

    .seat-info {
        margin-top: 10px;
    }

    .email-box {
        margin-top: 10px;
    }

        .email-box input {
            width: 100%;
            padding: 5px;
            margin-top: 5px;
            border: 1px solid gray;
            border-radius: 5px;
        }

    .reserve-button {
        background-color: green;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        display: block;
        margin: auto;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
    }

        .reserve-button:hover {
            background-color: darkgreen;
        }

        .reserve-button:disabled {
            background-color: gray;
            cursor: not-allowed;
        }

    .error-message {
        color: red;
        font-weight: bold;
        margin-top: 10px;
        text-align: center;
    }
</style>
