@page "/ReservationCreation/{ProjectionId:guid}"
@inject NavigationManager Navigation
@using Cinema.WEB.Api
@using Cinema.Common.Entities.MovieService
@inject ReservationServiceHttpClient UsersClient
@inject MovieServiceHttpClient MovieServiceClient
@inject CinemaServiceHttpClient CinemaServiceClient
@rendermode InteractiveServer

<PageTitle>Reservation Creation</PageTitle>

<div class="top-right">
    <button class="create-account-button" @onclick="NavigateToUserCreation">VYTVOŘIT ÚČET</button>
</div>

<div class="container">
    <h1>KINO</h1>
    <h3>REZERVACE</h3>

    <div class="reservation-box">
        <div class="reservation-details">
            <div class="movie-title">@MovieName</div>
            <div class="seat-info">
                <strong>SEDADLA:</strong> @FormattedSeats
            </div>
            <div class="email-box">
                <label for="email"><strong>EMAIL:</strong></label>
                <input type="email"
                id="email"
                @bind="UserEmail"
                @bind:after="() => ShowErrorMessage = false"
                placeholder="Zadejte svůj e-mail">
            </div>
        </div>

        @if (ShowErrorMessage)
        {
            <div class="error-message">
                Účet na tento email neexistuje, vytvořte jej kliknutím na "VYTVOŘIT ÚČET".
            </div>
        }

        <button class="reserve-button" @onclick="ConfirmReservationFix" disabled="@IsReservationDisabled">
            REZERVOVAT
        </button>
    </div>
</div>

@code {
    [Parameter]
    public Guid ProjectionId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "seats")]
    public string seats { get; set; }

    private List<Guid> seatIds = new();
    private string FormattedSeats { get; set; } = "Žádné sedadlo";
    private string UserEmail { get; set; } = "";
    private bool ShowErrorMessage { get; set; } = false;
    private bool IsReservationDisabled => string.IsNullOrWhiteSpace(UserEmail);
    private ProjectionEntity Projekce = null;
    private string HallName = null;
    private string StartingTime = null;
    private string MovieName = null;
    private List<string> seatDetails = new();


    protected async override Task OnInitializedAsync()
    {
        Projekce = await MovieServiceClient.GetProjectionById(ProjectionId);
        var hall = await CinemaServiceClient.GetHallByHallId(Projekce.HallId);
        HallName = hall.Name;
        StartingTime = Projekce.StartTime.ToLongDateString();
        var movie = await MovieServiceClient.GetMovieById(Projekce.MovieId);
        MovieName = movie.Title;

        if (!string.IsNullOrEmpty(seats))
        {
            seatIds = seats.Split(',', StringSplitOptions.RemoveEmptyEntries)
                           .Select(Guid.Parse)
                           .ToList();
            foreach(var item in seatIds)
            {
                seatDetails.Add(await CinemaServiceClient.GetSeatInfo(item));
            }

            FormattedSeats = string.Join(" | ", seatDetails);
        }
    }

    private async Task ConfirmReservationFix()
    {
        ShowErrorMessage = false;

        if (string.IsNullOrWhiteSpace(UserEmail)) return;

        var userId = await UsersClient.GetUserIdByEmail(UserEmail);

        if (userId == Guid.Empty)
        {
            ShowErrorMessage = true;
            return;
        }

        await FinilizeReservation(userId);
    }

    private async Task FinilizeReservation(Guid userId)
    {
        try
        {
            var result = await UsersClient.CreateReservation(ProjectionId, seatIds, userId);
            
            //Navigation.NavigateTo($"/ReservationConfirmation/{result}");
            Navigation.NavigateTo($"/");
        }
        catch
        {
            Navigation.NavigateTo("/ErrorPage");
        }
    }

    private void NavigateToUserCreation()
    {
        Navigation.NavigateTo("/UserCreation");
    }
}

<style>
    .container {
        text-align: center;
        margin-top: 20px;
        font-family: Arial, sans-serif;
    }

    .top-right {
        position: absolute;
        top: 60px;
        right: 20px;
    }

    .create-account-button {
        background-color: blue;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
        border-radius: 5px;
    }

        .create-account-button:hover {
            background-color: darkblue;
        }

    .reservation-box {
        border: 2px solid black;
        display: inline-block;
        padding: 20px;
        margin-top: 20px;
        text-align: left;
        background-color: #f9f9f9;
        border-radius: 10px;
        width: 350px;
    }

    .reservation-details {
        border: 1px solid black;
        padding: 10px;
        margin-bottom: 20px;
        background-color: white;
        border-radius: 5px;
    }

    .movie-title {
        background-color: lightgray;
        font-weight: bold;
        text-align: center;
        padding: 5px;
        border-radius: 5px;
    }

    .seat-info {
        margin-top: 10px;
        font-size: 14px;
    }

    .email-box {
        margin-top: 10px;
    }

        .email-box input {
            width: 100%;
            padding: 5px;
            margin-top: 5px;
            border: 1px solid gray;
            border-radius: 5px;
        }

    .reserve-button {
        background-color: green;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        display: block;
        margin: auto;
        text-align: center;
        text-decoration: none;
        border-radius: 5px;
    }

        .reserve-button:hover {
            background-color: darkgreen;
        }

        .reserve-button:disabled {
            background-color: gray;
            cursor: not-allowed;
        }

    .error-message {
        color: red;
        font-weight: bold;
        margin-top: 10px;
        text-align: center;
    }
</style>
